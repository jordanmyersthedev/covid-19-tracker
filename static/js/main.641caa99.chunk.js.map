{"version":3,"sources":["App/App.js","serviceWorker.js","index.js"],"names":["App","onSearch","e","setState","searchValue","target","value","state","covid19Stats","fetch","method","headers","then","response","json","data","catch","err","console","log","this","className","type","onChange","placeholder","map","location","index","province","toLowerCase","includes","key","country","lastUpdate","confirmed","deaths","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uNAqIeA,G,wDAlIb,aAAe,IAAD,8BACZ,gBA4BFC,SAAW,SAAAC,GACT,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA5BtC,EAAKC,MAAQ,CACXC,aAAc,GACdJ,YAAa,IAJH,E,gEAOO,IAAD,OAClBK,MACE,iFACA,CACEC,OAAQ,MACRC,QAAS,CACP,kBAAmB,iDACnB,iBACE,wDAILC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAC,GACJ,EAAKV,SAAS,CAAEK,aAAcK,EAASE,KAAKP,kBAE7CQ,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAMR,IAAD,OACCT,EAAiBY,KAAKb,MAAtBC,aACR,OACE,yBAAKa,UAAU,aACb,gDACA,2GAIA,2BACEC,KAAK,OACLC,SAAUH,KAAKnB,SACfoB,UAAU,SACVG,YAAY,6BAEd,yBAAKH,UAAU,kBACZb,EAAaiB,KAAI,SAACC,EAAUC,GAC3B,MAA+B,KAA3B,EAAKpB,MAAMH,aAuBXsB,EAASE,SACNC,cACAC,SAAS,EAAKvB,MAAMH,YAAYyB,eAvBnC,yBAAKE,IAAKJ,EAAON,UAAWK,EAASE,UACnC,4BACGF,EAASE,SADZ,KACwBF,EAASM,SAEjC,2CACgB,IACd,0BAAMX,UAAU,gBAAgBK,EAASO,aAE3C,8CACmB,IACjB,0BAAMZ,UAAU,mBACbK,EAASQ,YAGd,sCACU,0BAAMb,UAAU,UAAUK,EAASS,UAkC7C,yBAAKJ,IAAKJ,EAAON,UAAWK,EAASE,SAAW,WAC9C,4BACGF,EAASE,SADZ,KACwBF,EAASM,SAEjC,2CACgB,IACd,0BAAMX,UAAU,gBACbK,EAASO,aAGd,8CACmB,IACjB,0BAAMZ,UAAU,mBACbK,EAASQ,YAGd,sCACU,0BAAMb,UAAU,UAAUK,EAASS,mB,GAtH/CC,cCUEC,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.641caa99.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      covid19Stats: [],\n      searchValue: '',\n    };\n  }\n  componentDidMount() {\n    fetch(\n      'https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats?country=Canada',\n      {\n        method: 'GET',\n        headers: {\n          'x-rapidapi-host': 'covid-19-coronavirus-statistics.p.rapidapi.com',\n          'x-rapidapi-key':\n            'cbba18372fmsh11ab9e60dfeaa18p19529fjsnc7c72655e7be',\n        },\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(response => {\n        this.setState({ covid19Stats: response.data.covid19Stats });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n  onSearch = e => {\n    this.setState({ searchValue: e.target.value });\n  };\n  render() {\n    const { covid19Stats } = this.state;\n    return (\n      <div className='container'>\n        <h1>COVID-19 Tracker</h1>\n        <p>\n          Simple UI, because it's just for keeping up to date on the current\n          pandemic.\n        </p>\n        <input\n          type='text'\n          onChange={this.onSearch}\n          className='search'\n          placeholder='Search for your province'\n        />\n        <div className='flex-container'>\n          {covid19Stats.map((location, index) => {\n            if (this.state.searchValue === '') {\n              return (\n                <div key={index} className={location.province}>\n                  <h2>\n                    {location.province}, {location.country}\n                  </h2>\n                  <p>\n                    Last Updated:{' '}\n                    <span className='last-updated'>{location.lastUpdate}</span>\n                  </p>\n                  <p>\n                    confirmed cases:{' '}\n                    <span className='confirmed-cases'>\n                      {location.confirmed}\n                    </span>\n                  </p>\n                  <p>\n                    Deaths: <span className='deaths'>{location.deaths}</span>\n                  </p>\n                </div>\n              );\n            } else {\n              if (\n                location.province\n                  .toLowerCase()\n                  .includes(this.state.searchValue.toLowerCase())\n              ) {\n                return (\n                  <div key={index} className={location.province}>\n                    <h2>\n                      {location.province}, {location.country}\n                    </h2>\n                    <p>\n                      Last Updated:{' '}\n                      <span className='last-updated'>\n                        {location.lastUpdate}\n                      </span>\n                    </p>\n                    <p>\n                      confirmed cases:{' '}\n                      <span className='confirmed-cases'>\n                        {location.confirmed}\n                      </span>\n                    </p>\n                    <p>\n                      Deaths: <span className='deaths'>{location.deaths}</span>\n                    </p>\n                  </div>\n                );\n              } else {\n                return (\n                  <div key={index} className={location.province + ' hidden'}>\n                    <h2>\n                      {location.province}, {location.country}\n                    </h2>\n                    <p>\n                      Last Updated:{' '}\n                      <span className='last-updated'>\n                        {location.lastUpdate}\n                      </span>\n                    </p>\n                    <p>\n                      confirmed cases:{' '}\n                      <span className='confirmed-cases'>\n                        {location.confirmed}\n                      </span>\n                    </p>\n                    <p>\n                      Deaths: <span className='deaths'>{location.deaths}</span>\n                    </p>\n                  </div>\n                );\n              }\n            }\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}